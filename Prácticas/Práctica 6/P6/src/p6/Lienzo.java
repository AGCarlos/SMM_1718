/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package p6;

import java.awt.*;
import java.awt.font.TextAttribute;
import java.awt.geom.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
/**
 *
 * @author CArlos
 */
public class Lienzo extends javax.swing.JPanel {

    /**
     * Creates new form Lienzo
     */
    public Lienzo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    int forma;
    boolean edicion=false;
    Line2D  linea;
    Rectangle rect; 
    QuadCurve2D q = new QuadCurve2D.Float();
    Point pAux;
    List<Shape> vShape = new ArrayList();
    Shape s = new Rectangle();
    String tipoFuente;
    Ellipse2D clipArea = new Ellipse2D.Float(100,100,500,500);
    boolean ventanaClipActiva;

    
    public void setTipoFuente(String a){
        tipoFuente = a ;
    }
    
    public String getTipoFuente(){
        return tipoFuente;
    }
    
    public void setVentanaClipActiva(boolean a){
        ventanaClipActiva = a ;
    }
    
    public boolean getVentanaClipActiva(){
        return ventanaClipActiva;
    }
    
    public void setForma(int a){
        forma = a ;
    }
    
    public void setEdicion(boolean a){
        edicion = a ;
    }
    
    public boolean getEdicion(){
        return edicion;
    }
    
    private Shape getSelectedShape(Point2D p){
        for(Shape s:vShape)
            if(s.contains(p)) return s;
        return null;
    }
    
    private void setAtributos(Graphics2D g2d){
        
        //Trazo
            Stroke trazo;
            float patronDiscontinuidad[] = {15.0f, 15.0f};
            trazo = new BasicStroke(10.0f,
                        BasicStroke.CAP_ROUND,
                        BasicStroke.JOIN_MITER, 1.0f,
                        patronDiscontinuidad, 0.0f);
            
            g2d.setStroke(trazo);
            
            //Pintamos una forma de prueba
            g2d.draw(new Line2D.Float(40,40,160,160));
            
            //Relleno
            Paint relleno;
            relleno = new Color(255, 100, 0);
            g2d.setPaint(relleno);
            g2d.draw(new Rectangle(170,40,120,120));
            g2d.fill(new Rectangle(300,40,120,120));
            
            //Relleno con gradiente
            Point pc1 = new Point(430,40), pc2 = new Point(550,160);
            relleno = new GradientPaint(pc1, Color.RED, pc2, Color.BLUE);
            g2d.setPaint(relleno);
            g2d.fill(new Rectangle(430,40,120,120));

            //Composición
            Composite comp;
            comp = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f);
            g2d.setComposite(comp);
            g2d.fill(new Rectangle(190, 100, 200, 120));
            
            //Transformación
            Rectangle r = new Rectangle(430, 190, 120, 120);
            g2d.draw(r); //Dibujamos rectángulo sin transformación
            //Creamos la transformacion
            AffineTransform at;
            at = AffineTransform.getRotateInstance(Math.toRadians(45.0),r.getCenterX(),r.getCenterY());
            g2d.setTransform(at);
            //Dibujamos rectángulo con transformación
            g2d.fill(r); 
            
            at = AffineTransform.getScaleInstance(0.5,0.5);
            g2d.setTransform(at);
            g2d.draw(r);
            
            at.setToIdentity();
            at.translate(r.getCenterX(),r.getCenterY());
            at.scale(0.5,0.5);
            at.translate(-r.getCenterX(),-r.getCenterY());
            g2d.setTransform(at);
            g2d.draw(r);
           
            
            
            //Ejercicio Escalado
            at = AffineTransform.getScaleInstance(0.25,0.25);
            g2d.setTransform(at);
            
            at.setToIdentity();
            at.translate(r.getCenterX(),r.getCenterY());
            at.scale(0.25,0.25);
            at.rotate(Math.toRadians(45.0));
            at.translate(-r.getCenterX(),-r.getCenterY());
            g2d.setTransform(at);
            g2d.draw(r);
         
            at.setToIdentity();
            g2d.setTransform(at);

            

            //Fuente
            Font fuente;
            fuente = new Font(tipoFuente, Font.BOLD | Font.ITALIC, 45);
            g2d.setFont(fuente);
            g2d.drawString("Hola", 30, 220);
            
            Map atributosTexto = fuente.getAttributes();
            atributosTexto.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            g2d.setFont( new Font(atributosTexto) );
            g2d.drawString("mundo", 30, 260);
            
            //Renderización
            RenderingHints render;
            g2d.draw(new Ellipse2D.Float(40,350,510,50)); //Elipse sin antialiasing
            render = new RenderingHints(RenderingHints.KEY_ANTIALIASING,
            RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setRenderingHints(render);
            g2d.draw(new Ellipse2D.Float(40,450,510,50)); //Elipse con antialiasing
            g2d.drawString("Hola", 30, 170);
            
            render.put(RenderingHints.KEY_COLOR_RENDERING,
            RenderingHints.VALUE_COLOR_RENDER_QUALITY);
            
            //Recorte
            if(!ventanaClipActiva){
                Shape clipArea;
                clipArea = new Ellipse2D.Float(100,100,500,500);
                g2d.setClip(clipArea);

                g2d.draw(clipArea);
            }
        
    }
    
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
             
        pAux = evt.getPoint();

        switch(forma){
            //Linea
            case 0:

                if(!edicion)
                    linea = new Line2D.Float(evt.getPoint(),evt.getPoint());
                else 
                    linea = linea;
                 
                if(!edicion) 
                   vShape.add(linea);
            
            break;
            //Rectangulo
            case 1:
                
                if(!edicion) 
                    rect = new Rectangle(pAux);
                else{
                        rect = (Rectangle) getSelectedShape(evt.getPoint());
                    }
                
                if(!edicion) vShape.add(rect);
                
                 if(!edicion)
                    rect.setFrameFromDiagonal(evt.getPoint(), evt.getPoint());
                else 
                    if(rect!=null) rect.setLocation(evt.getPoint());
                 
            break;
        }
         
        this.repaint();
        
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        /*
        */
        switch(forma){
            
            //Linea
            case 0:
                if(!edicion)
                    linea.setLine(linea.getP1(),evt.getPoint());
                else
                    linea = linea;
            break;
            
            //Rectangulo
            case 1:  
                if(!edicion)
                    rect.setFrameFromDiagonal(pAux, evt.getPoint());
                else 
                    if(rect!=null) rect.setLocation(evt.getPoint());
            break;
            
        }
                
        

        this.repaint();
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        

        switch(forma){
            
            //Linea
            case 0:
                if(!edicion)
                    linea.setLine(linea.getP1(),evt.getPoint());
                else
                    linea = linea;
            break;
                
            //Rectangulo
            case 1:
                
                if(!edicion)
                    rect.setFrameFromDiagonal(pAux, evt.getPoint());
                else 
                    if(rect!=null) rect.setLocation(evt.getPoint());
            break;
            
        }   

        this.repaint();
        
    }//GEN-LAST:event_formMouseReleased

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        
    }//GEN-LAST:event_formMouseClicked

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        if(ventanaClipActiva){
            Point corner = evt.getPoint();
            corner.translate((int)clipArea.getWidth()/2,
            (int)clipArea.getHeight()/2);
            clipArea.setFrameFromCenter(evt.getPoint(), corner);
            this.repaint();
        }
    }//GEN-LAST:event_formMouseMoved

    @Override
        public void paint(Graphics g){   
            super.paint(g);
            Graphics2D g2d=(Graphics2D)g;
           
            if (ventanaClipActiva) {
                g2d.setClip(clipArea);
            }   
            
            setAtributos(g2d);
                        
            for(Shape s:vShape)
                g2d.draw(s);
            
        }
        

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

