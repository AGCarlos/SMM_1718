/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sm.cag.iu;

import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.font.TextAttribute;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javafx.scene.shape.Ellipse;
import sm.cag.graficos.*;

/**
 *
 * @author PC
 */
public class Lienzo2D extends javax.swing.JPanel {

    /**
     * Creates new form Lienzo
     */
    public Lienzo2D() {
        initComponents();
    }

    private List<Shape> vShape = new ArrayList();
    private Color color = Color.black;
    private int mododib = 4;
    private boolean relleno = false;
    private boolean transparencia = false;
    private boolean alisado = false;
    private boolean edicion = false;
    private int forma = 0;
    private int grosor;
    MiLinea punto;
    private boolean mpu=false;
    MiLinea linea;
    private boolean mli=false;
    Rectangle rect;
    Ellipse2D ovalo;
    private boolean mov=false;
    Point pAux,pAux2;

    public void setColor(Color a) {
        this.color = a;
    }

    public Color getColor() {
        return color;
    }

    public void setModoDib(int a) {
        this.mododib = a;
    }

    public int getModoDib() {
        return mododib;
    }

    public void setRelleno(boolean relleno) {
        this.relleno = relleno;
    }

    public boolean getRelleno() {
        return relleno;
    }
    
    public void setTransparencia(boolean transparencia) {
        this.transparencia = transparencia;
    }

    public boolean getTransparencia() {
        return transparencia;
    }
    
    public void setAlisado(boolean Alisado) {
        this.alisado = Alisado;
    }

    public boolean getAlisado() {
        return alisado;
    }
    
    public void setEdicion(boolean Edicion) {
        this.edicion = Edicion;
    }

    public boolean getEdicion() {
        return edicion;
    }
    
    public void setForma(int a){
        forma = a ;
    }
    
    public int getForma(){
        return forma;
    }
    
    public void setGrosor(int a){
        grosor = a ;
    }
    
    public int getGrosor(){
        return grosor;
    }
    
    
    
    private Shape getSelectedShape(Point2D p){
        for(Shape s:vShape)
            if(s.contains(p)) return s;
        return null;
    }

    private void setAtributos(Graphics2D g2d,Color color, int stroke) {
        
        //Color
        g2d.setColor(color);

        //Trazo
        Stroke trazo;
        trazo = new BasicStroke(stroke,
                BasicStroke.CAP_ROUND,
                BasicStroke.JOIN_MITER);

        g2d.setStroke(trazo);

        if(transparencia){
        //Composición
        Composite comp;
        comp = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f);
        g2d.setComposite(comp);
        }
        
        if(alisado){
        //Renderización
        RenderingHints render;
        render = new RenderingHints(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setRenderingHints(render);
        }

    }

    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2d = (Graphics2D) g;

        setAtributos(g2d, color, grosor);

        for (Shape s : vShape) {
            if (relleno) {
                g2d.fill(s);
                g2d.draw(s);
            } else {
                g2d.draw(s);
            }

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        pAux = evt.getPoint();

        switch (forma) {
            //Punto
            case 0:

                if (!edicion) {
                    punto = new MiLinea(evt.getPoint(), evt.getPoint());
                } else {
                    if (getSelectedShape(evt.getPoint()) instanceof MiLinea) {
                        punto = (MiLinea) getSelectedShape(evt.getPoint());
                    }
                }

                if (!edicion) {
                    vShape.add((Shape) punto);
                }

                if (edicion) {
                    if (punto != null) {
                        if (getSelectedShape(evt.getPoint()) instanceof MiLinea) {
                            punto.setLocation(evt.getPoint()); mpu=true;
                        }
                    }
                }

                break;
            //Linea
            case 1:

                if (!edicion) {
                    linea = new MiLinea(evt.getPoint(), evt.getPoint());
                } else {
                    if (getSelectedShape(evt.getPoint()) instanceof MiLinea) {
                        linea = (MiLinea) getSelectedShape(evt.getPoint());
                    }
                }

                if (!edicion) {
                    vShape.add(linea);
                }

                if (edicion) {
                    if (linea != null) {
                        if (getSelectedShape(evt.getPoint()) instanceof MiLinea) {
                            linea.setLocation(evt.getPoint()); mli=true;
                        }
                    }
                }

                break;
            //Rectangulo
            case 2:

                if (!edicion) {
                    rect = new Rectangle(pAux);
                } else {
                    if (getSelectedShape(evt.getPoint()) instanceof Rectangle) {
                        rect = (Rectangle) getSelectedShape(evt.getPoint());
                    }
                }

                if (!edicion) {
                    vShape.add(rect);
                }

                if (!edicion) {
                    rect.setFrameFromDiagonal(evt.getPoint(), evt.getPoint());
                } else if (rect != null) {
                    if (getSelectedShape(evt.getPoint()) instanceof Rectangle) {
                        rect.setLocation((int) (evt.getX() - (rect.getWidth()) / 2), (int) (evt.getY() - (rect.getHeight()) / 2));
                    }
                }

                break;
            //Óvalo
            case 3:

                if (!edicion) {
                    ovalo = new Ellipse2D.Double(pAux.getX(), pAux.getY(), 1, 1);
                } else {
                    if (getSelectedShape(evt.getPoint()) instanceof Ellipse2D) {
                        ovalo = (Ellipse2D) getSelectedShape(evt.getPoint());
                    }
                }

                if (!edicion) {
                    vShape.add(ovalo);
                }

                if (!edicion) {
                    ovalo.setFrameFromDiagonal(evt.getPoint(), evt.getPoint());
                } else if (ovalo != null) {
                    if (getSelectedShape(evt.getPoint()) instanceof Ellipse2D) {
                        ovalo.setFrame(evt.getPoint().x, evt.getPoint().y, ovalo.getWidth(), ovalo.getHeight()); mov=true;
                    }
                }

                break;
        }

        this.repaint();
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        switch (forma) {

            //Punto
            case 0:

                if (edicion) {
                    if (punto != null) {
                        if (mpu) {
                            punto.setLocation(evt.getPoint());
                        }
                    }
                }

                break;

            //Linea
            case 1:
                if (!edicion) {
                    linea.setLine(linea.getP1(), evt.getPoint());
                } else {
                    if (linea != null) {
                        if (mli) {
                            linea.setLocation(evt.getPoint());
                        }
                    }
                }

                break;

            //Rectangulo
            case 2:
                if (!edicion) {
                    rect.setFrameFromDiagonal(pAux, evt.getPoint());
                } else if (rect != null) {
                    if (getSelectedShape(evt.getPoint()) instanceof Rectangle) {
                        rect.setLocation((int) (evt.getX() - (rect.getWidth()) / 2), (int) (evt.getY() - (rect.getHeight()) / 2));
                    }
                }
                break;

            //Ovalo
            case 3:
                
                if (!edicion) {
                    ovalo.setFrameFromDiagonal(pAux, evt.getPoint());
                } else if (ovalo != null) {
                    if (mov) {
                        ovalo.setFrame(evt.getPoint().x, evt.getPoint().y, ovalo.getWidth(), ovalo.getHeight());
                    }
                }
                break;

        }

        this.repaint();
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        switch (forma) {

            //Punto
            case 0:

                if (edicion) {
                    if (punto != null) {
                        if (mpu) {
                            punto.setLocation(evt.getPoint()); mpu =false;
                        }
                    }
                }

                break;

            //Linea
            case 1:
                if (!edicion) {
                    linea.setLine(linea.getP1(), evt.getPoint());
                } else {
                    if (linea != null) {
                        if (mli) {
                            linea.setLocation(evt.getPoint()); mli =false;
                        }
                    }
                }

                break;

            //Rectangulo
            case 2:

                if (!edicion) {
                    rect.setFrameFromDiagonal(pAux, evt.getPoint());
                } else if (rect != null) {
                    if (getSelectedShape(evt.getPoint()) instanceof Rectangle) {
                        rect.setLocation((int) (evt.getX() - (rect.getWidth()) / 2), (int) (evt.getY() - (rect.getHeight()) / 2));
                    }
                }
                break;

                //Ovalo
            case 3:

                if (!edicion) {
                    ovalo.setFrameFromDiagonal(pAux, evt.getPoint());
                } else if (ovalo != null) {
                    if (mov) {
                        ovalo.setFrame(evt.getPoint().x, evt.getPoint().y, ovalo.getWidth(), ovalo.getHeight()); mov=false;
                    }
                }
                break;

        }

        this.repaint();
    }//GEN-LAST:event_formMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
