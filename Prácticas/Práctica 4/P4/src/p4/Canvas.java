/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package p4;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;

/**
 *
 * @author PC
 */
public class Canvas extends javax.swing.JPanel {

    /**
     * Creates new form Canvas
     */
    public Canvas() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    Point p = new Point(-100,-100);
    Point p1 = new Point(-100,-100);
    Point p2 = new Point(-100,-100);
    
    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        p2= evt.getPoint();
        this.repaint();
    }//GEN-LAST:event_formMouseDragged

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        p= evt.getPoint();
        this.repaint();
    }//GEN-LAST:event_formMouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        p1= evt.getPoint();
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        p2= evt.getPoint();
        this.repaint();
    }//GEN-LAST:event_formMouseReleased

    Color color = Color.black;
    int mododib = 4;
    boolean relleno=false;
    int a,b,ancho,alto;

    
    public void setModoDib(int a){
        this.mododib=a;
    }
    
    public int getModoDib(){
        return mododib;
    }
    
    public void setRelleno(boolean relleno){
        this.relleno=relleno;
    }
    
    public boolean getRelleno(){
        return relleno;
    }
    
    public void limpiar(){
        p.setLocation(-100, -100);
        p1.setLocation(-100, -100);
        p2.setLocation(-100, -100);
        this.repaint();
    }
    
    public void paint(Graphics g){   
            super.paint(g);
            g.setColor(color);
            
            a = Math.min(p1.x,p2.x);
            b = Math.min(p1.y,p2.y);
            ancho = Math.abs(p1.x - p2.x);
            alto =  Math.abs(p1.y - p2.y);
            
        switch (mododib) { 
            case 0:
                if(!relleno){
                    g.drawOval(p.x-5, p.y-5, 10, 10);
                }else g.fillOval(p.x-5, p.y-5, 10, 10);
                break;
            case 1:
                g.drawLine(p1.x, p1.y, p2.x, p2.y);
                break;
            case 2:
                if(!relleno){
                    g.drawRect(a, b, ancho, alto);
                }else g.fillRect(a, b, ancho, alto);
                break;
            case 3:
                if(!relleno){
                    g.drawOval(a, b, ancho, alto);
                }else g.fillOval(a, b, ancho, alto);
                break;
            default:
                break;
        }
            
    }
            
}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

